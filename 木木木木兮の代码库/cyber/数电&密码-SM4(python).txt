FK0=0xA3B1BAC6
FK1=0x56AA3350
FK2=0x677D9197
FK3=0xB27022DC
FK=[FK0,FK1,FK2,FK3]
CK=[0x00070E15,0x1C232A31,0x383F464D,0x545B6269,0x70777E85,0x8C939AA1,0xA8AFB6BD,0xC4CBD2D9,0xE0E7EEF5,0xFC030A11,0x181F262D,0x343B4249,0x50575E65,0x6C737A81,0x888F969D,0xA4ABB2B9,0xC0C7CED5,0xDCE3EAF1,0xF8FF060D,0x141B2229,0x30373E45,0x4C535A61,0x686F767D,0x848B9299,0xA0A7AEB5,0xBCC3CAD1,0xD8DFE6ED,0xF4FB0209,0x10171E25,0x2C333A41,0x484F565D,0x646B7279]
length=len(CK)  #32
sbox = [[0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05, ],
        [0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, ],
        [0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62, ],
        [0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6, ],
        [0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8, ],
        [0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, ],
        [0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, ],
        [0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, ],
        [0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, ],
        [0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, ],
        [0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, ],
        [0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, ],
        [0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, ],
        [0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, ],
        [0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84, ],
        [0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48]]
 
def change(input):
    x=(input>>4)&0xff
    y=input&0xf
    return sbox[x][y]
 
def checkMK(MK):
    print(hex(MK[0]),hex(MK[1]),hex(MK[2]),hex(MK[3]))
 
 
def move(input_val, bit, width=32):
    mask = (1 << width) - 1
    left_shifted = input_val << bit
    overflow_bits = (left_shifted >> (width )) & mask
    circular_left_shifted = (left_shifted & mask) | (overflow_bits & mask)
    return circular_left_shifted
def T(input,CK,circle):
    ck=CK[circle]
    A=input[1]^input[2]^input[3]^ck
    byte1 = (A >> 24) & 0xFF  # 取最高8位
    byte2 = (A >> 16) & 0xFF  # 取次高8位
    byte3 = (A >> 8) & 0xFF  # 取次低8位
    byte4 = A & 0xFF  # 取最低8位
    s_list = [byte1, byte2, byte3, byte4]
    s_list_change=[change(s_list[0]),change(s_list[1]),change(s_list[2]),change(s_list[3])]
    B= (s_list_change[0] << 24) | (s_list_change[1] << 16) | (s_list_change[2] << 8) | s_list_change[3]
    return B^(move(B,13))^(move(B,23))^input[0]
 
def T_2(input,MK):
    ck=MK[3]
    A=input[1]^input[2]^input[3]^ck
    byte1 = (A >> 24) & 0xFF  # 取最高8位
    byte2 = (A >> 16) & 0xFF  # 取次高8位
    byte3 = (A >> 8) & 0xFF  # 取次低8位
    byte4 = A & 0xFF  # 取最低8位
    s_list = [byte1, byte2, byte3, byte4]
    s_list_change=[change(s_list[0]),change(s_list[1]),change(s_list[2]),change(s_list[3])]
    B= (s_list_change[0] << 24) | (s_list_change[1] << 16) | (s_list_change[2] << 8) | s_list_change[3]
    return B^(move(B,2))^(move(B,10))^(move(B,18))^(move(B,24))^input[0]
 
def sys_init(input,FK):
    for i in range(0,4):
        input[i]=input[i]^FK[i]
    return input
def crype_extension(input,FK,CK,circle):
    #input=sys_init(input,FK)
    output=[input[1],input[2],input[3],T(input,CK,circle)]
    print(f'rk{circle}={hex(output[3])}')
    return output
 
 
def input_cut(input):
    input &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  # 屏蔽掉超过128位的高位（虽然这在Python中通常是不必要的）
    # 提取四个32位的字
    X1 = (input >> 96) & 0xFFFFFFFF  # 提取最高的32位
    X2 = (input >> 64) & 0xFFFFFFFF  # 提取接下来的32位
    X3 = (input >> 32) & 0xFFFFFFFF  # 提取再接下来的32位
    X4 = input & 0xFFFFFFFF  # 提取最低的32位
    return [X1,X2,X3,X4]
 
 
def add(input,MK):
    for i in range(0,3):
        input[i]=input[i]^MK[i]
    return input
def crype(input_init,CK,FK,MK):
    input=input_cut(input_init)
    for i in range(0,32):
        MK=crype_extension(MK,FK,CK,i)
        # checkMK(MK)
        rec=[input[1],input[2],input[3]]
        # add(input,MK)
        rec.append(T_2(input,MK))
        print(f'X[{i+4}]={hex(rec[3])}')
        input=rec
    return input
 
#示例
input_init=0x0123456789ABCDEFFEDCBA9876543210
MK=input_cut(0x0123456789ABCDEFFEDCBA9876543210)
checkMK(MK)
MK=sys_init(MK,FK)
# checkMK(MK)
flag=crype(input_init,CK,FK,MK)
print(hex(flag[3]),hex(flag[2]),hex(flag[1]),hex(flag[0]))
 
 
 
 