#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<stdbool.h>
#include<ctype.h>
#include<malloc.h>
#include<time.h>
#define ll long long
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define eps 1e-10
#define BLOCK_SIZE 20;
void swap(int *input,int a,int b){
	int bottle;
	bottle=input[a];
	input[a]=input[b];
	input[b]=bottle;
}
int findmax(int *input,int length){
	int output;
	output=0;
	int i=0;
	for(i=0;i<length;i++){
		if(input[i]>input[output]){
			output=i;
		}
	}
	return output;
}
int cnt=0;
int findmin(int *input,int length,int begin){
	int output;
	output=begin;
	int i;
	for(i=begin+1;i<length;i++){
		cnt++;
		if(input[i]<input[output]){
			output=i;
		}
	}
	return output;
}
void check(int *input,int length){
	int i=0;
	for(i=0;i<length;i++){
		printf("%d ",input[i]); 
	}
	printf("\n");
	printf("%d\n",cnt);
}
void selectrange(int *input,int length){
	int i=0;
	for(i=0;i<length;i++){
		int rec;
		rec=findmin(input,length,i);
		swap(input,i,rec);
	}
	check(input,length);
}
void bubblesort(int *input,int length){
	int i,j;
	int flag=1;
	for(i=0;i<length-1;i++){
		flag=1;
		for(j=0;j<length-1-i;j++){
			cnt++;
			if(input[j]>input[j+1]){
				swap(input,j,j+1);
				flag=0;
			}
		}
		if(flag==1){
			break;
		}
	} 
	check(input,length);
}
void adjust(int *k,int i,int n)
{
    int j,temp;
    temp=k[i];
    j=2*i+1;
    while(j<n){
        if(j<n-1&&k[j]<k[j+1]){
        	 j++;
		}//max of left and right;
		cnt++;
        if(temp>=k[j]) {
        	break;
		}
        k[(j-1)/2]=k[j];
        j=2*j+1;
    }
    k[(j-1)/2]=temp;
}
int judge(int *input,int length){
	int i=0;
	int flag=1;
	for(i=1;i<length;i++){
		if(input[i]<input[i-1]){
			flag=0;
			break;
		}
	}
	if(flag==1){
		return 1;
	}
	else{
		return 0;
	}
}
void heapsort(int *input,int length){
	int i;
	for(i=length/2-1;i>=0;i--){
		adjust(input,i,length);
	}
	for(i=length-1;i>=1;i--){
		swap(input,0,i);
		adjust(input,0,i);
	} 
	check(input,length);
}
void merge(int *x,int *tmp,int left,int leftend,int rightend)
{     
    int i=left, j=leftend+1, q=left;
    while(i<=leftend && j<=rightend)
    {
    	cnt++;
       if(x[i]<=x[j]){
	   	tmp[q++]=x[i++];
	   }  
        else{
        	 tmp[q++]=x[j++];
		}
           
    }
    while(i<=leftend){
    	tmp[q++]=x[i++];
	}
    while(j<=rightend){
    	tmp[q++]=x[j++];
	}
    for(i=left; i<=rightend; i++)
        x[i]=tmp[i];
}
void msort(int *input,int *tmp,int left,int right){
	int mid;
	if(left<right){
		mid=(left+right)/2;
		msort(input,tmp,left,mid);
		msort(input,tmp,mid+1,right);
		merge(input,tmp,left,mid,right);
	}
}
void mergesort(int *input,int length){
	int *tmp;
	tmp=(int *)malloc(length*sizeof(int));
	if(tmp){
		msort(input,tmp,0,length-1);
	}
	else{
		printf("error\n");
		return ;
	}
	check(input,length);
}
void quicksort(int *k,int left,int right)
{     
    int i, last;
    if(left<right){
        last=left; 
        for(i=left+1;i<=right;i++){
        	cnt++;
        	if(k[i]<k[left]){
        	swap(k,++last,i); 	
			}
        	
		}

        swap(k,left,last);
        quicksort(k,left,last-1); 
        quicksort(k,last+1,right);   
    }
}
int main(){
	int num;
	int way;
	scanf("%d %d",&num,&way);
	int *save;
	save=(int *)malloc(num*2*sizeof(int));
	int i=0;
	for(i=0;i<num;i++){
		scanf("%d",&save[i]);
	}
	if(way==1){
		selectrange(save,num);
	}
	else if(way==2){
		bubblesort(save,num);
	}
	else if(way==3){
		heapsort(save,num);
	}
	else if(way==4){
		mergesort(save,num);
	}
	else{
			quicksort(save,0,num-1);
	check(save,num);
	}
	return 0;
}